
# Module os

The os module provides miscellaneous operating system functionality, such as file, directory and environment variable access.

The os module also includes several string processing functions for extracting various components from file system paths such as directory and file extension.

IMPORTANT: The os module is currently only available for the glfw and stdcpp targets.


# Function HostOS:String()

Returns a string describing the host operating system. The returned value will be one of:

| HostOS 	| Operating system
| `winnt`	| Windows
| `macos`	| MacOS 
| `linux`	| Linux


# Function AppPath:String()

Returns the file system path of the currently running application.


# Function AppArgs:String[]()

Returns the application startup parameters.


# Function RealPath:String(path:String)

Returns the real, or 'absolute', file system path corresponding to the given path.

Params: 

path - a file system path.


# Function FileType:Int(path:String)

Returns an integer representing the type of a file, one of: 0 for no file, 1 for a normal file, 2 for a directory.

Params: 

path - a file system path.


# Function FileSize:Int(path:String)

Return the length of a file, in bytes.

Params: 

path - a file system path.


# Function FileTime:Int(path:String)

Returns the time the file at path was last modified.

Params: 

path - a file system path.


# Function CopyFile:Int(src:String,dst:String)

Copies a file from srcpath to dstpath.

Params: 

srcpath - file system path of source file.

dstpath - file system path of destination file.


# Function DeleteFile:Int(path:String)

Deletes the specified file.

Params: 

path - a file system path.


# Function LoadString:String(path:String)

Loads a string from the file at path.

Params: 

path - a file system path.


# Function SaveString:Int(str:String,path:String)

Saves str to a file specified by path.

If a file already exists at path, it will be overwritten.

Params: 

str - a string value.

path - a file system path.


# Function LoadDir:String[](path:String)

Loads the file names in the directory specified by path into a string array.

If recursive is True, LoadDir will also load file names in subdirectories, but will not add subdirectories to the output string array.

If hidden is True, then hidden files - files starting with a dot - are also loaded.

Params: 

path - a file system path.

recursive - a flag indicating whether subdirectories should also be loaded.

hidden - a flag indicating whether hidden files should also be loaded.


# Function CreateDir:Int(path:String)

Create a new directory at path.

Params: 

path - a file system path.


# Function DeleteDir:Int(path:String)

Deletes the directory at path.

If recursive is True, then subdirectories are also deleted - use with care!

Params: 

path - file system path of directory to delete.

recursive - a flag indicating whether subdirectories should also be deleted.


# Function ChangeDir:Int(path:String)

Changes the current directory of the running application.

Params: 

path - file system path of directory.


# Function CurrentDir:String()

Returns the current directory of the currently running application.


# Function SetEnv:Int(name:String,value:String)

Sets an environment variable.

Params: 

name - name of environment var.

value - value to set environment var to.


# Function GetEnv:String(name:String)

Gets an environment variable.

Params: 

name - name of environment var.


# Function Execute:Int(cmd:String)

Executes a shell command and returns the result. This is generally 0 for success, or non-0 for failure.

Params: 

cmd - command to execute.


# Function ExitApp:Int(retcode:Int)

Exits the application with the given return code.

In general, ExitApp should return 0 if successful, or <0 upon failure.

Params: 

retcode - application return code.


# Const FILETYPE_NONE:Int


# Const FILETYPE_FILE:Int


# Const FILETYPE_DIR:Int


# Function LoadDir:String[](path:String,recursive:Bool,hidden:Bool=False)

Loads the file names in the directory specified by path into a string array.

If recursive is True, LoadDir will also load file names in subdirectories.

If hidden is True, then hidden files - files starting with a dot - are also loaded.

Params: 

path - a file system path.

recursive - a flag indicating whether subdirectories should also be loaded.

hidden - a flag indicating whether hidden files should also be loaded.


# Function CopyDir:Int(srcpath:String,dstpath:String,recursive:Bool,hidden:Bool)

Copies the directory at srcpath to dstpath, creating dstpath if necessary.

If recursive is True, then subdirectories are also copied.

If hidden is True, then hidden files - files starting with a dot - are also copied.

Params: 

srcpath - file system path of source directory.

dstpath - file system path of destination directory.

recursive - flag indicating whether subdirectories should also be copied.

hidden - flag indicating whther hidden files should also be copied.


# Function DeleteDir:Int(path:String,recursive:Bool)

Deletes the directory at path.

If recursive is True, then subdirectories are also deleted - use with care!

Params: 

path - file system path of directory to delete.

recursive - a flag indicating whether subdirectories should also be deleted.


# Function StripDir:String(path:String)

Removes the directory from a file system path, and returns the file name and extension.

Params: 

path - a file system path.


# Function ExtractDir:String(path:String)

Extracts and returns the directory of a file system path.

Params: 

path - a file system path.


# Function StripExt:String(path:String)

Extracts and returns the file extension of a file system path.

Params: 

path - a file system path.


# Function ExtractExt:String(path:String)

Extracts and returns the file type extension of a file system path.

Params: 

path - a file system path.


# Function StripAll:String(path:String)

Removes both the directory and file extension from a file system path, returning just the file name.

Params: 

path - a file system path.

