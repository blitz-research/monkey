
# Module monkey.lang

The lang module contains classes and functions built-in to the monkey language.


# Function Print:Int(message:String)

Prints @message to the current output channel.

The behavior of Print is target dependant. In general, monkey will attempt to print to the 'stdout' output channel, but on some targets this is not always an option.


# Function Error:Int(message:String)

Generates a runtime error message and ends program execution.

If @message is an empty string, program execution will end but no runtime error message with be generated.


# Function DebugLog:Int(message:String)

Writes @message to the current debug channel.


# Function DebugStop:Int()

Stops program execution.



# Class Array

The Array type is a fundamental monkey type used to represent array values.

Please see the Types section of the Monkey language reference for more information on the array type.


# Method Length:Int() Property

Returns the number of elements contained in the array.


# Method Resize:Void[](newLength:Int)

Returns a copy of this array, resized to newLength.

Params: 

newLength - new array length.



# Class Object

The Object class is the common base class for all monkey objects.

The object class currently has no members.

Please see the Object Type and Classes sections of the monkey language reference for more information about class and objects.



# Class String

The String type is a fundamental monkey type used to represent sequences of characters.

Please see the Types section of the monkey language reference for more information on the string type.


# Method Length:Int() Property

Returns the number of characters contained in the string.


# Method Compare:Int(str:String)

Compares two strings. Returns a value \<0 if this string is less than @str, a value \>0 if this string is greater than @str, or 0 if the strings are equal.

Params: 

@str - string to compare this string with.


# Method Find:Int(str:String,start:Int)

Returns the offset of the first occurrence of @str within this string, starting at the specified start offset.

Returns -1 if @str is not found.

Params: 

@str - string to find.

@start - offset to start search at.


# Method FindLast:Int(str:String)

Returns the offset of the last occurrence of @str within this string, starting at the optional offset specified by @start.

Returns -1 if @str is not found.

Params: 

@str - string to search for.

@start - offset to start search.


# Method FindLast:Int(str:String,start:Int)

Returns the offset of the last occurrence of @str within this string, starting at the optional offset specified by @start.

Returns -1 if @str is not found.

Params: 

@str - string to search for.

@start - offset to start search.


# Method Trim:String()

Removes any leading and trailing whitespace from the string and returns the result.


# Method Join:String(pieces:String[])

Creates a single string by joining together each element of @pieces, using the current string as a separator.

Params: 

@pieces - An array of string to be joined.


# Method Split:String[](separator:String)

Splits this string into an array of pieces, using the @separator string to delimit each piece.

Params: 

@separator - string to use to separate pieces.


# Method Replace:String(findStr:String,replaceStr:String)

Replaces all occurrences of @findStr with @replaceStr and returns the result.

Params: 

@findStr - string to search for.

@replaceStr - string to replace with.


# Method ToLower:String()

Converts the string to lowercase and returns the result.

Links: 

[[String.ToUpper|ToUpper]]


# Method ToUpper:String()

Converts the string to uppercase and returns the result.


Links: 

[[String.ToLower|ToLower]]


# Method Contains:Bool(str:String)

Returns true if the string contains @str, else false.


Params: 

@str - string to check for.


# Method StartsWith:Bool(str:String)

Returns true if the string starts with @str, else false.


Params: 

@str - string to check for.


# Method EndsWith:Bool(str:String)

Returns true if this string ends with @str, else false.

Params: 

@str - string to check for.


# Method ToChars:Int[]()

Converts string to an array of character codes.


# Function FromChar:String(charCode:Int)

Creates and returns a string of length 1 containing the character code specified by @charCode.

Params: 

@charCode - character code to convert to a string.


# Function FromChars:String(charCodes:Int[])

Creates and returns a string containing the character codes in the specified @charCode array.

Params: 

@charCodes - array of character codes.



# Class Throwable

The Throwable class must be extended by all classes that are intended to be used with [[Throw]].

The Throwable class currently has no members.

Any attempt to throw an object that doesn't extend Throwable will result in a compile time error.

Example:
<pre>
Class MyThrowable Extends Throwable

	Field msg:String
	
	Method New( msg:String )
		Self.msg=msg
	End
End

Function Test:Void()
	Throw New MyThrowable( "Thrown!" )
End

Function Main()
	Try
		Test
	Catch t:MyThrowable
		Print "MyThrowable thrown: msg="+t.msg
	End
End
</pre>
