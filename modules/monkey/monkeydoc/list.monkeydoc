
# Module monkey.list

The list module provides support for doubly linked lists.

In addition to the generic List class, the list module also provides utility classes for handling lists of ints, floats and strings.

Please refer to the [[List]] class for more information on how monkey implements linked lists.



# Class monkey.list.List<T>

A linked list is a container style data structure that provides efficient support for the addition, removal and sequential traversal of objects.

A linked list works by connecting elements together with 'next' and 'previous' references, making it very efficient to get from one element to the next, but not so efficient for accessing arbitrary elements.

This connection between elements is achieved using separate Node objects (there is one per element) which contain references to the next and previous nodes in the list, as well as the actual object managed by the node.


# Method New()

Creates a new, initially empty list object.


# Method New(data:T[])

Creates a new list object initialized with an array of values.

Params: 

values - an array of values


# Method ToArray:T[]()

Converts the list to an array of values.


# Method Equals:Bool(lhs:T,rhs:T)

This method is used by the [[Contains]] and [[RemoveEach]] methods to determine element equality.

By default, this method compares @lhs and @rhs using the '=' operator. Extending classes may override this method to provide their own equality test.


# Method Compare:Int(lhs:T,rhs:T)

This method is used by the [[Sort]] method to compare elements.

By default, this methods simply generates a runtime error. Extending classes should implement this method if they want to support [[Sort]].


# Method Clear:Int()

Removes all the elements from the list.


# Method Count:Int()

Returns the number of elements in the list.

Note that this method takes time proportional to the number of elements in the list.


# Method IsEmpty:Bool()

Return True if the list is empty, else False.


# Method Contains:Bool(value:T)

Returns true if list contains value.


# Method FirstNode:Node<T>()

Return the first node in the list, or Null if the list is empty.


# Method LastNode:Node<T>()

Returns the last node in the last, or Null if the list is empty.


# Method First:T()

Returns the first element in the list.

Using this method on an empty list will cause a runtime error in debug mode, and undefined behavior in release mode.


# Method Last:T()

Returns the last element in the list.

Using this method on an empty list will cause a runtime error in debug mode, and undefined behavior in release mode.


# Method RemoveFirst:T()

Removes the first value in the list and returns it.

Using this method on an empty list will cause a runtime error in debug mode, and undefined behavior in release mode.


# Method RemoveLast:T()

Removes the last value in the list and returns it.

Using this method on an empty list will cause a runtime error in debug mode, and undefined behavior in release mode.


# Method RemoveEach:Int(value:T)

Finds and removes each element in the list equal to @value.


# Method AddFirst:Node<T>(data:T)

Adds a value at the start of the list.


# Method AddLast:Node<T>(data:T)

Adds a value at the end of the list.


# Method InsertBefore:Node<T>(where:T,data:T)

Inserts @data before the first element in the list equal to @where.


# Method InsertAfter:Node<T>(where:T,data:T)

Inserts @data after the first element in the list equal to @where.


# Method InsertBeforeEach:Void(where:T,data:T)

Inserts @data before each element in the list equal to @where.


# Method InsertAfterEach:Void(where:T,data:T)

Inserts @data after each element in the list equal to @where.


# Method ObjectEnumerator:Object()

Returns an object enumerator for use with For Eachin loops.


# Method Backwards:Object()

Returns an object that may be used to iterate backwards through the list with a For EachIn loop.

Note that this doesn't not actually reverse or modify the list in any way.

Example: 

<pre>
Function Main()

	Local list:=New StringList
	
	list.AddLast "Hello"
	list.AddLast "there"
	list.AddLast "this"
	list.AddLast "is"
	list.AddLast "a"
	list.AddLast "test"
	
	Print "Fowards:"
	For Local t$=EachIn list
		Print t
	Next
	
	Print ""
	
	Print "Backwards:"
	For Local t$=Eachin list.Backwards()
		Print t
	Next

End
</pre>


# Method Sort:Int(ascending:Int)

Sorts the list.




# Class monkey.list.Node

See the [[List]] class for a discussion of list nodes.


'# Method New(succ:Node,pred:Node,data:T)


# Method Value:T()

Returns the value stored in the node.


# Method Remove:Int()

Removes this node from the list.

This method should only be used once - attempting to remove a node twice will result in a null object error.


# Method NextNode:Node()

Returns the node after this node, or null if this is the last node in the list.


# Method PrevNode:Node()

Returns the node before this node, or null if this is the first node in the list.


'# Method GetNode:Node<T>()



# Class monkey.list.IntList Extends List<Int>

IntList is a convenience class for handling lists of integer values.


# Method New()

Creates a new empty IntList.


# Method Compare:Int(lhs:Int,rhs:Int)

Implements the [[List.Compare]] method, which allows IntLists to be sorted using the [[Sort]] method.




# Class monkey.list.FloatList Extends List<Float>

FloatList is a convenience class for handling lists of floating point values.


# Method New()

Creates a new empty FloatList.


# Method Compare:Int(lhs:Float,rhs:Float)

Implements the [[List.Compare]] method, which allows FloatLists to be sorted using the [[Sort]] method.




# Class monkey.list.StringList Extends List<String>

StringList is a convenience class for handling lists of string values.


# Method New()

Creates a new empty StringList.


# Method Compare:Int(lhs:String,rhs:String)

Implements the [[List.Compare]] method, which allows StringLists to be sorted using the [[Sort]] method.


# Method Join:String(separator:String="")

Concatenates the elements of the list together, inserting the specified separator between each element.


Params: 

separator - string to use to separate elements.


