
# Module brl.asyncstream

# Import brl.asyncevent

# Import brl.databuffer

An async stream allows you to read and write data asynchronously, so that data is transferred in the background while your program continues to run.

Please see the [[AsyncStream]] class for more information.

(Note: async streams are only currently available on the stdcpp, glfw, android and ios targets.)


# Interface brl.asyncstream.IOnReadComplete

# Method OnReadComplete:Void( data:DataBuffer,offset:int,count:int,source:IAsyncEventSource )

Called by an async stream when reading has completed.

The @data and @offset will be the same as those you provided to the initial Read.

The @count parameter will contain the number of bytes actually transferred.

Links: 

[[AsyncStream.Read]]


# Interface brl.asyncstream.IOnWriteComplete

# Method OnWriteComplete:Void( data:DataBuffer,offset:int,count:int,source:IAsyncEventSource )

Called by an async stream when writing has completed.

The @data and @offset will be the same as those you provided to the initial Write.

The @count parameter will contain the number of bytes actually transferred.

Links: 

[[AsyncStream.Write]]


# Class brl.asyncstream.AsyncStream Implements IAsyncEventSource

An async stream allows you to read and write data asynchronously, so that data is transferred in the background while your program continues to run.

To begin reading data asynchronously from an async stream, use the [[Read]] or [[ReadAll]] method. When using these methods, you must provide an object that implements the [[IOnReadComplete]] interface so that your program can be notified when the read operation completes.

To begin writing data asynchronously to an async stream, use the [[Write]] or [[WriteAll]] method. When using these methods, you must provide an object that implements the [[IOnWriteComplete]] interface so that your program can be notified when the write operation completes.

(Note: async streams are only currently available on the stdcpp, glfw, android and ios targets.)

# Method Read:Void( data:DataBuffer,offset:Int,count:Int,onComplete:IOnReadComplete )

Begins reading from the async stream and returns immediately. 

When either at least one byte has been read or EOF occurs, the OnReadComplete method of the @onComplete object will be called.

Links: 

[[IOnReadComplete]]


# Method ReadAll:Void( data:DataBuffer,offset:Int,count:Int,onComplete:IOnReadComplete )

Begins reading from the async stream and returns immediately. 

When either @count bytes have been read or EOF occurs, the OnReadComplete method of the @onComplete object will be called.

Links: 

[[IOnReadComplete]]


# Method Write:Void( data:DataBuffer,offset:Int,count:Int,onComplete:IOnWriteComplete )

Begins writing to the async stream and returns immediately. 

When either at least one byte has been written or EOF occurs, the OnWriteMethod method of the @onComplete object is called.

Links: 

[[IOnWriteComplete]]


# Method WriteAll:Void( data:DataBuffer,offset:Int,count:Int,onComplete:IOnWriteComplete )

Begins writing to the async stream and returns immediately. 

When either @count bytes have been written or EOF occurs, the OnWriteMethod method of the @onComplete object is called.

Links: 

[[IOnWriteComplete]]
