
# Module mojo.graphics

The graphics module contains various functions that allow you to draw 2D graphics on all supported monkey target platforms.

The module supports rendering of file based images, and a small set of simple primitives.

Transparency effects can be achieved using SetAlpha to set the global alpha level, and fullscreen rotation and scaling effects can be achieved using the various matrix commands such as Translate, Rotate and Scale.

The graphics module is state based, and commands that 'set' various states will remain in effect until a subsequent 'set' modifies the state.


# Const AlphaBlend:Int


# Const AdditiveBlend:Int


# Function DeviceWidth:Int()

***** Moved to [[Modules/mojo.app#DeviceWidth|mojo.app.DeviceWidth]] *****


# Function DeviceHeight:Int()

***** Moved to [[Modules/mojo.app#DeviceHeight|mojo.app.DeviceHeight]] *****


# Function LoadImage:Image(path:String,frameCount:Int=1,flags:Int=Image.DefaultFlags)

Loads an image from path.

The frames of a multi-frame image must be laid out in a single horizontal strip, in which case the width of the image is the width of image file divided by the number of frames, and the height of the image is the height of the image file.

The image must be a PNG or JPEG image format, and must have the three-letter file extension .png or .jpg (not .jpeg). PNGs with alpha transparency channels are supported.

Like all game data, the image file must be saved in your project's .data folder or one of its sub-folders.

If your images contain edge padding, you will need to use one of the padding flags such as XYPadding.

See DefaultFlags for a list of valid image flags.

Links: [[Resource paths]], [[File formats]], [[CreateImage]], [[Image.DefaultFlags]], [[Image.GrabImage]]


# Function LoadImage:Image(path:String,frameWidth:Int,frameHeight:Int,frameCount:Int,flags:Int=Image.DefaultFlags)

Loads an image from path.

The frames of a multi-frame image may occupy more than 1 row. In this case, frames should be laid out left-to-right, top-to-bottom.

The image must be a PNG or JPEG image format, and must have the three-letter file extension .png or .jpg (not .jpeg). PNGs with alpha transparency channels are supported.

Like all game data, the image file must be saved in your project's .data folder or one of its sub-folders.

If your images contain edge padding, you will need to use one of the padding flags such as XYPadding.

See DefaultFlags for a list of valid image flags.

Links: [[Resource paths]], [[File formats]], [[CreateImage]], [[Image.DefaultFlags]], [[Image.GrabImage]]


# Function SetColor:Int(r:Float,g:Float,b:Float)

Sets the current color.

The current color is used by all drawing operations except Cls.

Note: Drawing images in any color other than 255,255,255 on the HTML5 target will incur a major runtime overhead. For best results on the HTML5 target, either use colored images sparingly, or consider using 'pre-colored' images stored in multiple image files.

Links: [[GetColor]]


# Function GetColor:Float[]()

Returns the current color as a 3 component float array containg the current color's red, green and blue components respectively.

Links: [[SetColor]]


# Function GetColor:Int(color:Float[])

Copies the current color to @color.

The length of @color must be at least 3.

Links: [[SetColor]]


# Function SetAlpha:Int(alpha:Float)

Sets the current global alpha level.

Alpha controls the 'mixing' that occurs when rendering. An alpha value of 1 results in completely opaque rendering, while 0 results in completely transparent rendering.

In the case of images which contain alpha, the alpha used for rendering is the product of each image pixel's alpha and the current global alpha.

Global alpha affects all drawing operations except for Cls.

Links: [[GetAlpha]]


# Function GetAlpha:Float()

Returns the current alpha level in the range 0 to 1 inclusive.

Links: [[SetAlpha]]


# Function SetBlend:Int(blend:Int)

Sets the current blending mode.

The current blending mode affects all drawing commands except for Cls.

The @blend parameter can be one of the following:

| Blend				| Description
| AlphaBlend		| Rendering operations are alpha blended with existing graphics
| AdditiveBlend		| Rendering operations are additively blended with existing graphics

Links: [[GetBlend]]


# Function GetBlend:Int()

Returns the current blend mode. See [[SetBlend]] for possible return values.

Links: [[SetBlend]]


# Function SetScissor:Int(x:Float,y:Float,width:Float,height:Float)

Sets the current scissor rectangle to the rectangle specified by x, y, width and height.

All drawing commands are 'clipped' to the current scissor rectangle. To disable clipping, set the scissor rectangle to 0,0,DeviceWidth,DeviceHeight.

The rectangle coordinates used with SetScissor are device coordinates, and are not affected by the current matrix.

Links: [[GetScissor]]


# Function GetScissor:Float[]()

Returns the current scissor rectangle as a 4 component float array containg the scissor rectangle's x,y, width and height coordinates respectively.

Links: [[SetScissor]]


# Function GetScissor:Int(scissor:Float[])

Copies the current scissor rectangle to @scissor.

The length of @scissor must be at least 4.

Links: [[SetScissor]]


# Function SetMatrix:Int(m:Float[])

Sets the current matrix.

Links: [[GetMatrix]]


# Function SetMatrix:Int(ix:Float,iy:Float,jx:Float,jy:Float,tx:Float,ty:Float)

Sets the current matrix.

Links: [[GetMatrix]]


# Function GetMatrix:Float[]()

Returns the current transformation matrix as an array of 6 floats.

Links: [[SetMatrix]]


# Function GetMatrix:Int( matrix:Float[] )

Copies the current transformation matrix to @matrix.

The length of @matrix must be at least 6.

Links: [[SetMatrix]]


# Function PushMatrix:Int()

Pushes the current matrix onto the internal matrix stack.

The matrix can be restored at a later time using PopMatrix.

Links: [[PopMatrix]]


# Function PopMatrix:Int()

Pops a matrix from the internal matrix stack and makes it the current matrix.

Links: [[PushMatrix]]



# Function Transform:Int(m:Float[])

Multiplies the current matrix by the specified matrix.


# Function Transform:Int(ix:Float,iy:Float,jx:Float,jy:Float,tx:Float,ty:Float)

Multiplies the current matrix by the specified matrix.


# Function Translate:Int(x:Float,y:Float)

Multiplies the current matrix by a matrix representing the specified translation.


# Function Scale:Int(x:Float,y:Float)

Multiplies the current matrix by a matrix representing the specified scale.


# Function Rotate:Int(angle:Float)

Multiplies the current matrix by a matrix representing the specified rotation.


# Function Cls:Int(r:Float=0,g:Float=0,b:Float=0)

Clears the graphics device to the specified color.

The current color, alpha and blend mode are ignored by Cls. However, the scissor rect is still used so only the area inside the scissor rect is cleared.


# Function DrawPoint:Int(x:Float,y:Float)

Draws a point at the coordinates x, y.

The point is drawn using the current color, alpha, blend mode and matrix, and is clipped to the current scissor rectangle.


# Function DrawRect:Int(x:Float,y:Float,w:Float,h:Float)

Draws a rectangle of size width, height at the coordinates x, y.

The rectangle is drawn using the current color, alpha, blend mode and matrix, and is clipped to the current scissor rectangle.


# Function DrawLine:Int(x1:Float,y1:Float,x2:Float,y2:Float)

Draws a line from x1, y1 to x2, y2.

The line is drawn using the current color, alpha, blend mode and matrix, and is clipped to the current scissor rectangle.


# Function DrawOval:Int(x:Float,y:Float,w:Float,h:Float)

Draws an oval of size width, height at coordinates x, y.

The oval is drawn using the current color, alpha, blend mode and matrix, and is clipped to the current scissor rectangle.

Links: [[DrawEllipse]]


# Function DrawCircle:Int(x:Float,y:Float,r:Float)

Draws a circle of the given radius at coordinates x, y.

The circle is drawn using the current color, alpha, blend mode and matrix, and is clipped to the current scissor rectangle.


# Function DrawEllipse:Int(x:Float,y:Float,xr:Float,yr:Float)

Draws an ellipse of radii xRadius, yRadius at coordinates x, y.

The ellipse is drawn using the current color, alpha, blend mode and matrix, and is clipped to the current scissor rectangle.

Links: [[DrawOval]]


# Function DrawPoly:Int(verts:Float[])

Draw a convex polygon using the provided vertices.

The polygon is drawn using the current color, alpha, blend mode and matrix, and is clipped to the current scissor rectangle.

If the polygon described by vertices is not convex, the results are undefined.

The vertices array must contain at least 3 x,y pairs.


# Function DrawImage:Int(image:Image,x:Float,y:Float,frame:Int=0)

Draws an image at coordinates x, y, offset by the image's handle.

The image is drawn using the current color, alpha, blend mode and matrix, and is clipped to the current scissor rectangle.

Links: [[LoadImage]], [[DrawImageRect]]


# Function DrawImage:Int(image:Image,x:Float,y:Float,rotation:Float,scaleX:Float,scaleY:Float,frame:Int=0)

Draws an image at coordinates x, y, offset by the image's handle.

The image is drawn using the current color, alpha, blend mode and matrix, and is clipped to the current scissor rectangle.

The rotation and scaleX, scaleY parameters provide a convenient way for you to 'locally' rotate and scale the image.

Links: [[LoadImage]], [[DrawImageRect]]


# Function DrawImageRect:Int(image:Image,x:Float,y:Float,srcX:Int,srcY:Int,srcWidth:Int,srcHeight:Int,frame:Int=0)

Draws a sub-rectangle of an image at coordinates x, y, offset by the image's handle.

The image is drawn using the current color, alpha, blend mode and matrix, and is clipped to the current scissor rectangle.

Links: [[LoadImage]], [[DrawImage]]


# Function DrawImageRect:Int(image:Image,x:Float,y:Float,srcX:Int,srcY:Int,srcWidth:Int,srcHeight:Int,rotation:Float,scaleX:Float,scaleY:Float,frame:Int=0)

Draws a sub-rectangle of an image at coordinates x, y, offset by the image's handle.

The image is drawn using the current color, alpha, blend mode and matrix, and is clipped to the current scissor rectangle.

The rotation and scaleX, scaleY parameters provide a convenient way for you to 'locally' rotate and scale the image.

Links: [[LoadImage]], [[DrawImage]]


# Function SetFont:Int(font:Image,firstChar:Int=32)

Sets the font for use with DrawText.

The font parameter may be Null, in which case an internal 7x11 white-on-black font is used and the firstChar parameter is ignored.

Note: The font functionality in mojo is very limited and intended mainly for debugging purposes

Links: [[GetFont]]


# Function GetFont:Image()

Returns the current font.

Links: 

[[SetFont]]


# Function TextWidth:Float(text:String)

Returns the width of the given text.


# Function FontHeight:Float()

Returns the height of the current font.


# Function DrawText:Int(text:String,x:Float,y:Float,xalign:Float=0,yalign:Float=0)

Draws text at coordinates x, y in the current font.

The current font may be modified using SetFont. By default, an internal 7 x 13 white-on-black font is used.

xalign and yalign allow you to control the alignment of the text and should be in the range 0 for left/top alignment to 1 for right/bottom alignment. A value of .5 can be used for centering text horizontally or vertically.

The text is drawn using the current color, alpha, blend mode and matrix, and is clipped to the current scissor rectangle.

Note: The font functionality in mojo is very limited and intended mainly for debugging purposes.


'# Function InvTransform:Float[](coords:Float[])

# Function CreateImage:Image(width:Int,height:Int,frameCount:Int=1,flags:Int=Image.DefaultFlags)

Creates an empty image for use with [[Image.WritePixels]].

The contents of the image are initially undefined.

Links: [[LoadImage]]


# Function ReadPixels:Void(pixels:Int[],x:Int,y:Int,width:Int,height:Int,arrayOffset:Int=0,arrayPitch:Int=0)

Copies a rectangular section of pixels from the current render buffer into an int array.

The pixel data is stored in int-per-pixel ARGB format, with the alpha component stored in bits 24-31, the red component in bits 16-23, the green component in bits 8-15 and the blue component in bits 0-7.

The optional @arrayOffset parameter allows you to specify an index into the array at which to start writing pixel values.

The optional @arrayPitch parameter allows you to specify a 'pitch'. This is the number of array elements between successive rows in the array. If this is 0, then @width is used as pitch, meaning pixel data is assumed to be 'tightly packed'.


# Class mojo.graphics.Image

An image is a rectangular area of pixels, loaded from an image file with LoadImage or grabbed from another image with GrabImage.

Image can be created using [[LoadImage]] and drawn with [[DrawImage]] or [[DrawImageRect]].

Images have a width, a height and a handle. A handle is a 'local origin' which allows you to control the centre point of an image when drawing it.

Images can also contain multiple 'frames', and when drawing an image a specific frame may be drawn. Each frame in a multi-frame image is the same width and height.

Images can also be used as 'image atlases'. An image atlas is a single image that contains multiple smaller images. You can use the GrabImage method of Image to 'grab' an image from an atlas.

The idea behind image atlases is that they can be rendered much more efficiently by graphics hardware, so for best results you should try and make as much use of image atlases as possibly. As a nice side effect, image atlases can also be convenient for artists to deal with.

Import note: When creating an image atlas or an image containing multiple animation frames, it is a good idea to add a single pixel border around each frame that extends the pixels at the edges of the frame. This will prevent rendering 'noise' caused by accidental fetches of pixels outside the frame, which can sometimes occur due to mathematical inaccuracies. To enable padding, you should use one of the image padding flags: Image.XPadding, Image.YPadding or Image.XYPadding when using LoadImage or GrabImage.


# Const MidHandle:Int


# Const XPadding:Int


# Const YPadding:Int


# Const XYPadding:Int


# Global DefaultFlags:Int

The image flags used by default when an image is loaded or grabbed.

Image flags can be one of:

| Flags           | Meaning
| Image.MidHandle | The image should be automatically handled by its centre once created.
| Image.XPadding  | Each image frame includes a one pixel padding border to the left and to the right.  
| Image.YPadding  | Each image frame includes a one pixel padding border above and below.  
| Image.XYPadding | Indicates both XPadding and YPadding.

DefaultFlags is initially 0.

Links: [[LoadImage]], [[GrabImage]]


# Method Width:Int()

Returns the width of the image, in pixels.


Links:

[[Height]]

# Method Height:Int()

Returns the height of the image, in pixels.

Links:

[[Width]]


# Method Frames:Int()

Returns the number of frames in the image.


# Method Flags:Int()

Returns the flags used to create the image.


# Method HandleX:Float()

Returns the x coordinate of the current image's handle.

Links: 

[[SetHandle]], [[HandleY]]


# Method HandleY:Float()

Returns the y coordinate of the current image's handle.

Links: 

[[SetHandle]], [[HandleX]]


# Method GrabImage:Image(x:Int,y:Int,width:Int,height:Int,frames:Int,flags:Int)

GrabImage creates a new image by 'grabbing' a rectangular region of the current image.

Multiple frame images are assumed to be laid out in a horizontal strip, in which case width and height are the dimensions of each frame, and the source image must be wide enough to contain the entire strip.

Note that if image flags includes any padding, then the specified rectangle includes padding. This means image width and/or height may be '2 less' than the width and/or height you specify.

Links: 

[[DefaultFlags]]


# Method SetHandle:Int(tx:Float,ty:Float)

Sets the image offset handle for this image. The handle is a 2D offset subtracted from the x,y coordinates of the image when it is drawn. 

By default, images have a handle of 0,0, meaning the top-left pixel appears at the coordinates used in DrawImage.

By specifying Image.MidHandle when loading or grabbing an image - or by setting Image.Default flags to Image.MidHandle before hand - images will automatically be handled by their centre instead.

The image handle is subtracted before rotation and scale are applied providing a 'local' origin.

Links: 

[[HandleX]], [[HandleY]]


# Method Discard:Int()

Discard any underlying resources associated with the image.

This isn't normally necessary because automatic memory management will eventually take care of this for you. However, on devices with limited resources this may which to do this manually.


# Method WritePixels:Void(pixels:Int[],x:Int,y:Int,width:Int,height:Int,arrayOffset:Int=0,arrayPitch:Int=0,relative:Bool=True)

Copies a rectangular section of pixels from an int array to the image.

The pixel data must be stored in int-per-pixel ARGB format, with the alpha component stored in bits 24-31, the red component in bits 16-23, the green component in bits 8-15 and the blue component in bits 0-7.

The optional @arrayOffset parameter allows you to specify an index into the array from which to start reading pixel values.

The optional @arrayPitch parameter allows you to specify a 'pitch' - the number of array elements between successive rows in the array. If this is 0, then @width is used as pitch, meaning pixel data is assumed to be 'tightly packed'.

The optional @relative parameter allows you to toggle between image-relative and surface-relative coordinates. This controls how the @x and @y parameters behave.
