
# Module reflection

Reflection allows your program to inspect and access all or some of your program's declarations dynamically at runtime.

>>> Enabling reflection

To enable reflection, you must at least import the reflection module.

In addition, you may provide a 'filter' to limit reflection to a subset of modules using the REFLECTION_FILTER app config setting.

By default, the reflection module will set REFLECTION_FILTER to '*' indicating all modules should be reflected. To override this, you must set REFLECTION_FILTER before importing the reflection module.

Reflection can incur significant overhead, so it's a probably a good idea to only reflect what you really need to.

Here are some examples of using REFLECTION_FILTER:

<pre>
REFLECTION_FILTER="myapp*"                  'only reflect declarations in the main app
REFLECTION_FILTER="myapp\*|mojo\*"            'reflect the main app AND mojo modules
REFLECTION_FILTER="myapp.reflect|mojo\*|os\*" 'reflect myapp.reflect module AND mojo and os modules.
REFLECTION_FILTER="mojo.graphics"           'only reflect mojo.graphics module
</pre>

>>> Declaration names

Declarations that appear at 'module scope' - that is, declarations that do not appear within a class - are fully qualified by the module they appear in.

For example, the DrawImage function that appears in the mojo.graphics module is named "mojo.graphics.DrawImage".

This is the name returned by the various Name() methods, and is the name you should use with the GetConst, GetGlobal, GetFunction and GetClass functions.

As a convenience, you can also use unqualified names with the Get functions as long as there is only one unique declaration with the given name.

For example, GetFunction( "mojo.graphics.DrawImage" ) and GetFunction( "DrawImage" ) will return the same FunctionInfo object, as long as DrawImage is only declared in one module.

Declarations that appear at class scope are not qualified.

>>> Box objects

Non-object values of type int, float, string and array must be 'boxed' before they are passed to reflection methods such as SetValue and Invoke.

To do this, use the BoxInt, BoxFloat, BoxString functions. These functions all return a 'box' Object which is suitable for use with SetValue and Invoke.

Similarly, reflection methods such as GetValue and Invoke that return non-object values will return boxed values. 

To unbox these values, use the UnboxInt, UnboxFloat and UnboxString functions.

Here's an example of boxing and unboxing in action:

<pre>
Import reflection

Global MyGlobal:=123

Function Main()

'Get GlobalInfo for MyGlobal 
	Local g:=GetGlobal( "MyGlobal" )

'Read and unbox value of MyGlobal
	Local n1:=UnboxInt( g.GetValue() )

'Print it...
	Print "n1="+n1

'Box and write value of MyGlobal
	g.SetValue( BoxInt( n1*2 ) )

'Read, unbox and dump...
	Local n2:=UnboxInt( g.GetValue() )
	Print "n2="+n2
End
</pre>

Boxing and Unboxing arrays is slightly trickier - you must use the Box and Unbox functions declared in the ArrayBoxer class to do this. Here's an example:

<pre>
Import reflection

Global MyGlobal:Int[]

Function Main()

	'create an int array
	Local intArray:Int[]=[1,2,3,4,5]

	'box it...	
	Local boxedArray:=ArrayBoxer&lt;Int&gt;.Box( intArray )
	
	'set value of MyGlobal
	GetGlobal( "MyGlobal" ).SetValue( boxedArray )
	
	'dump array
	For Local i:=Eachin MyGlobal
		Print i
	Next
	
	'reassign MyGlobal
	MyGlobal=[6,7,8,9,10]
	
	'read value of MyGlobal
	boxedArray=GetGlobal( "MyGlobal" ).GetValue()
	
	'Unbox it...
	intArray=ArrayBoxer&lt;Int&gt;.Unbox( boxedArray )
	
	'dump unboxed array
	For Local i:=Eachin intArray
		Print i
	Next

End
</pre>


# Const ATTRIBUTE_EXTERN:Int


# Const ATTRIBUTE_PRIVATE:Int


# Const ATTRIBUTE_ABSTRACT:Int


# Const ATTRIBUTE_FINAL:Int


# Const ATTRIBUTE_INTERFACE:Int


# Function BoxBool:Object(value:Bool)

Creates a box object with the given value.

Box objects can be passed to the SetValue methods of FieldInfo and GlobalInfo objects, and used as parameters for the Invoke methods of MethodInfo and FunctionInfo objects.

Box objects are also returned by the GetValue methods of ConstInfo, FieldInfo and GlobalInfo objects, and by the Invoke methods of MethodInfo and FunctionInfo objects.

Links: 

[[UnboxBool]]


# Function BoxInt:Object(value:Int)

Creates a box object with the given value.

Box objects can be passed to the SetValue methods of FieldInfo and GlobalInfo objects, and used as parameters for the Invoke methods of MethodInfo and FunctionInfo objects.

Box objects are also returned by the GetValue methods of ConstInfo, FieldInfo and GlobalInfo objects, and by the Invoke methods of MethodInfo and FunctionInfo objects.

Links: 

[[UnboxInt]]


# Function BoxFloat:Object(value:Float)

Creates a box object with the given value.

Box objects can be passed to the SetValue methods of FieldInfo and GlobalInfo objects, and used as parameters for the Invoke methods of MethodInfo and FunctionInfo objects.

Box objects are also returned by the GetValue methods of ConstInfo, FieldInfo and GlobalInfo objects, and by the Invoke methods of MethodInfo and FunctionInfo objects.

Links: 

[[UnboxFloat]]


# Function BoxString:Object(value:String)

Creates a box object with the given value.

Box objects can be passed to the SetValue methods of FieldInfo and GlobalInfo objects, and used as parameters for the Invoke methods of MethodInfo and FunctionInfo objects.

Box objects are also returned by the GetValue methods of ConstInfo, FieldInfo and GlobalInfo objects, and by the Invoke methods of MethodInfo and FunctionInfo objects.

Links: 

[[UnboxString]]


# Function UnboxBool:Bool(box:Object)

Unboxes a bool. The box must have been previously created with BoxBool.

Links: 

[[BoxBool]]


# Function UnboxInt:Int(box:Object)

Unboxes an int. The box must have been previously created with BoxInt.

Links: 

[[BoxInt]]


# Function UnboxFloat:Float(box:Object)

Unboxes a float. The box must have been previously created with BoxFloat.

Links: 

[[BoxFloat]]


# Function UnboxString:String(box:Object)

Unboxes a string. The box must have been previously created with BoxString.

Links: 

[[BoxString]]


# Function BoolClass:ClassInfo()


Returns the class of a 'bool'.

This is actually the class of the objects used to box bools, since bools aren't objects and therefore don't have a class.


# Function IntClass:ClassInfo()

Returns the class of an 'int'.

This is actually the class of the objects used to box ints, since ints aren't objects and therefore don't have a class.


# Function FloatClass:ClassInfo()

Returns the class of a 'float'.

This is actually the class of the objects used to box floats, since floats aren't objects and therefore don't have a class.


# Function StringClass:ClassInfo()

Returns the class of a 'string'.

This is actually the class of the objects used to box strings, since strings aren't objects and therefore don't have a class.


# Function ArrayClass:ClassInfo(elementType:String)

Returns the class of an array.

The elementType parameter is case sensitive, and must be the fully qualified name of the element type.

The elementType parameter may itself be an array, in which case the returned class represents a multidimensional array.

This is actually the class of the objects used to box arrays, since arrays aren't objects and therefore don't have a class.

Params: 

elementType - Array element type.


# Function GetClasses:ClassInfo[]()

Returns an array of all reflected classes.

Links: 

[[GetClass]], [[ClassInfo]]


# Function GetClass:ClassInfo(name:String)

Returns the ClassInfo object with the given name, or Null if no object is found.

Links: 

[[GetClasses]], [[ClassInfo]]


# Function GetClass:ClassInfo(obj:Object)

Returns the ClassInfo object with the given name, or Null if no object is found.

Links: 

[[GetClasses]], [[ClassInfo]]


# Function GetConsts:ConstInfo[]()

Returns an array of all consts declared at module scope.

Links: 

[[GetConst]], [[ConstInfo]]


# Function GetConst:ConstInfo(name:String)

Returns the ConstInfo object with the given name, or Null if no object is found.

Links: 

[[GetConsts]], [[ConstInfo]]


# Function GetGlobals:GlobalInfo[]()

Returns an array of all reflected globals.

Links: 

[[GetGlobal]], [[GlobalInfo]]


# Function GetGlobal:GlobalInfo(name:String)

Returns the GlobalInfo object with the given name, or Null if no object is found.

Links: 

[[GetGlobals]], [[GlobalInfo]]


# Function GetFunctions:FunctionInfo[]()

Returns an array of all reflected functions.

Links: 

[[GetFunction]], [[FunctionInfo]]


# Function GetFunction:FunctionInfo(name:String,argTypes:ClassInfo[])

Returns the FunctionInfo object with the given name and parameter types, or Null if no object is found.

Links: 

[[GetFunctions]], [[FunctionInfo]]




# Class reflection.ArrayBoxer

The ArrayBoxer class is a utility class that allows you to box and unbox arrays for use with reflection.

Box objects can be passed to the SetValue methods of FieldInfo and GlobalInfo objects, and used as parameters for the Invoke methods of MethodInfo and FunctionInfo objects.

Box objects are also returned by the GetValue methods of ConstInfo, FieldInfo and GlobalInfo objects, and by the Invoke methods of MethodInfo and FunctionInfo objects.


# Function Box:Object(value:T[])

Box an array.


# Function Unbox:T[](box:Object)

Unbox an array.




# Class reflection.ClassInfo

ClassInfo objects describe classes declared by your program and in modules.

The ArrayLength, GetElement, SetElement and NewArray methods are only valid if the class represents an array box class. You can determine whether a class is an array box class with the ElementType method. If ElementType returns non-null, then the class is an array box class.

The recursive parameter of the GetConst, GetGlobal, GetField, GetMethod and GetFunction methods indicates whether or not the entire class hierarchy should be searched, or only the current class.

The recursive parameter of the GetConsts, GetGlobals, GetFields, GetMethods and GetFunctions methods indicates whether or not all declarations spanning the entire class hierarchy should be returned, or only those declared within the current class.


# Method Name:String() Property

Get name of class.


# Method Attributes:Int() Property

Get class attributes.


# Method SuperClass:ClassInfo() Property

Get super class of class.


# Method Interfaces:ClassInfo[]() Property

Get interfaces implemented by this class, or interfaces extended by this interface.


# Method ElementType:ClassInfo() Property

Get array element type.


# Method ArrayLength:Int(inst:Object)

Get length of an array.


# Method GetElement:Object(inst:Object,index:Int)

Get an array element.


# Method SetElement:Void(inst:Object,index:Int,value:Object)

Set an array element.


# Method NewInstance:Object()

Create a new object of this class.


# Method NewArray:Object(length:Int)

Create a new array box object of this class.


# Method ExtendsClass:Bool(clas:ClassInfo)

Check if class extends another class, or implements an interface.


# Method GetConsts:ConstInfo[](recursive:Bool)

Get all consts declared by class.


# Method GetConst:ConstInfo(name:String,recursive:Bool)

Get a class const.


# Method GetGlobals:GlobalInfo[](recursive:Bool)

Get all globals declared by class.


# Method GetGlobal:GlobalInfo(name:String,recursive:Bool)

Get a class global.


# Method GetFields:FieldInfo[](recursive:Bool)

Get all fields declared by class.


# Method GetField:FieldInfo(name:String,recursive:Bool)

Get a class field.


# Method GetMethods:MethodInfo[](recursive:Bool)

Get all methods declared by class.


# Method GetMethod:MethodInfo(name:String,argTypes:ClassInfo[],recursive:Bool)

Get a class method.


# Method GetFunctions:FunctionInfo[](recursive:Bool)

Get all functions declared by class.


# Method GetFunction:FunctionInfo(name:String,argTypes:ClassInfo[],recursive:Bool)

Get a class function.


# Method GetConstructors:FunctionInfo[]()

Get all constructors declared by class.


# Method GetConstructor:FunctionInfo(argTypes:ClassInfo[])

Get a class constructor.



# Class reflection.ConstInfo

ConstInfo objects describe constant values declared by your program.


# Method Name:String() Property

Get name of const.


# Method Attributes:Int() Property

Get const attributes.


# Method Type:ClassInfo() Property

Get type of const.


# Method GetValue:Object()

Get value of const.



# Class reflection.FieldInfo

FieldInfo objects describe fields declared within a class.


# Method Name:String() Property

Name of field.


# Method Attributes:Int() Property

Get field attributes.


# Method Type:ClassInfo() Property

Type of field.


# Method GetValue:Object(inst:Object)

Get field value.


# Method SetValue:Void(inst:Object,value:Object)

Set field value.



# Class reflection.FunctionInfo

FunctionInfo objects describe functions declared by your program.


# Method Name:String() Property

Get name of function.


# Method Attributes:Int() Property

Get function attributes.


# Method ReturnType:ClassInfo() Property

Get return type of function.


# Method ParameterTypes:ClassInfo[]() Property

Get function parameter types.


# Method Invoke:Object(args:Object[])

Invoke function.



# Class reflection.GlobalInfo

GlobalInfo objects describe globals declared by your program.


# Method Name:String() Property

Get name of global.


# Method Attributes:Int() Property

Get global attributes.


# Method Type:ClassInfo() Property

Get type of global.


# Method GetValue:Object()

Get value of global.


# Method SetValue:Void(obj:Object)

Set value of global.



# Class reflection.MethodInfo

MethodInfo objects describe methods declared by your program.


# Method Name:String() Property

Get name of method.


# Method Attributes:Int() Property

Get method attributes.


# Method ReturnType:ClassInfo() Property

Get return type of method.


# Method ParameterTypes:ClassInfo[]() Property

Get method parameter types.


# Method Invoke:Object(inst:Object,args:Object[])

Invoke method.
